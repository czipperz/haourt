#!/bin/bash

C='\033[0m'
W='\033[0;37m'
B='\033[1;10m'
U='\033[4;10m'

# Downloads all given packages
# Parameters: $@ - Package names
function downloadAll() {
	while (( $# > 0 )); do
		download $1
		shift
	done
}

# Downloads a given package - uses `forceDownload`
# Parameters: $1 - Package name
function download() {
	while read line; do
		name=$(echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/$1/')
		vers=$(echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/$2/')
		if [ "$1" == "$name" ]; then
			forceDownload "$name" "$vers"
			break
		fi
	done < "$HOME/.config/haourt/mirrorlist"
	unset name vers
}

# Backend downloader
function forceDownload() {
	mkdir -p /tmp/haourt
	cd /tmp/haourt
	printf "===>>> Downloading $B$U$1$C ver:$W$2$C\n"
	curl -L "https://github.com/czipperz/haourt/raw/master/packages/${1}-${2}.src.tar.gz" > "${1}-${2}.src.tar.gz"
	echo "===>>> It is stored in /tmp/haourt/${1}-${2}.src.tar.gz"
}

# Installs all given packages
# Parameters: $@ - Package names
function syncAll() {
	while (( $# > 0 )); do
		sync $1
		shift
	done
}

# Installs a given package
# Parameters: $1 - Package name
function sync() {
	while read line; do
		name=$(echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/$1/')
		vers=$(echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/$2/')
		if [ "$1" == "$name" ]; then
			forceInstall "$name" "$vers"
			break
		fi
	done < "$HOME/.config/haourt/mirrorlist"
	unset name vers
}

# Backend installer - uses `forceDownload` and `forceModify`
function forceInstall() {
	forceDownload "$1" "$2"
	forceModify "$1" "$2"
	export _HOME="$HOME"
	export _whoami="$(whoami)"
	makepkg -sci --noconfirm
	if [[ $? ]]; then
		echo "===>>> No error detected, cleaning up"
		cd /tmp/haourt
		rm -R $1
		nnnn=0
		(cat $HOME/.config/haourt/installed | perl -pe "s/${1}\-\d+\.\d+\-\d+\.src\.tar\.gz/${1}-${2}.src.tar.$(nnnn=1; echo gz)/") > $HOME/.config/haourt/installed
		(( $nnnn == 0 )) && echo "${1}-${2}.src.tar.gz" >> $HOME/.config/haourt/installed
		unset nnnn
	else
		echo "===>>> "
		echo "===>>> Error occurred... backup stored at /tmp/haourt/${1}-${2}.src.tar.gz"
	fi
}

function modifyAll() {
	while (( $# > 0 )); do
		modify $1
		shift
	done
}

function modify() {
	while read line; do
		name=$(echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/$1/')
		vers=$(echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/$2/')
		if [ "$1" == "$name" ]; then
			forceModify $name $vers
			break
		fi
	done < "$HOME/.config/haourt/mirrorlist"
	unset name vers
}

function forceModify() {
	cd /tmp/haourt
	tar xf "${1}-${2}.src.tar.gz"
	cd "$1"
	cat PKGBUILD | perl -pe 's/^pkgname\=(.*)$/pkgname=$1-local-'"$(whoami)"'\n/'
}

function syncMirrorList() {
	echo "===>>> Downloading mirrorlist"
	curl -L "https://github.com/czipperz/haourt/raw/master/mirrorlist" > "$HOME/.config/haourt/mirrorlistnew" 2>/dev/null
	if diff "$HOME/.config/haourt/mirrorlistnew" "$HOME/.config/haourt/mirrorlist" >/dev/null 2>/dev/null; then
		echo "===>>> No mirrorlist changes"
		rm "$HOME/.config/haourt/mirrorlistnew"
	else
		echo "===>>> New mirrorlist version, you have been updated"
		cp "$HOME/.config/haourt/mirrorlistnew" "$HOME/.config/haourt/mirrorlist"
	fi
}

# Scans $HOME/.config/haourt/installed and compares the version numbers
# Then runs	`install` on those programs that differ
function update() {
	while read inst; do
		name=$(echo "$inst" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/$1/')
		vers=$(echo "$inst" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/$2/')
		while read line; do
			nameMIR=$(echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/$1/')
			versMIR=$(echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/$2/')
			if [ "$name" == "$nameMIR" ]; then
				if [ ! "$vers" == "$versMIR" ]; then
					forceInstall "$name" "$versMIR"
				fi
				break
			fi
		done < "$HOME/.config/haourt/mirrorlist"
	done < "$HOME/.config/haourt/installed"
	unset name vers nameMIR versMIR
}

function query() {
	if (( $# == 0 )); then
		while read line; do
			echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/'"$B$U"'$1'"$C"' ver:'"$W"'$2/'
		done < $HOME/.config/haourt/installed
	else
		while read line; do
			nnnn=$(echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/$1/')
			if [[ "$nnnn" == "$@" ]]; then
				echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/'"$B$U"'$1'"$C"' ver:'"$W"'$2/'
			fi
		done < $HOME/.config/haourt/installed
		unset nnnn
	fi
}

function querysearch() {
	if (( $# == 0 )); then
		while read line; do
			echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/'"$B$U"'$1'"$C"' ver:'"$W"'$2/'
		done < $HOME/.config/haourt/installed
	else
		while read line; do
			nnnn=$(echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/$1/')
			if [[ 1 -eq $(echo "$nnnn" | fgrep -c "$@") ]]; then
				echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/'"$B$U"'$1'"$C"' ver:'"$W"'$2/'
			fi
		done < $HOME/.config/haourt/installed
		unset nnnn
	fi
}

function search() {
	if (( $# == 0 )); then
		while read line; do
			echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/'"$B$U"'$1'"$C"' ver:'"$W"'$2/'
		done < $HOME/.config/haourt/mirrorlist
	else
		while read line; do
			nnnn=$(echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/$1/')
			if [[ 1 -eq $(echo "$nnnn" | fgrep -c "$@") ]]; then
				echo "$line" | perl -pe 's/(.*?)\-(\d+\.\d+\-\d+)\.src\.tar\.gz/'"$B$U"'$1'"$C"' ver:'"$W"'$2/'
			fi
		done < $HOME/.config/haourt/mirrorlist
		unset nnnn
	fi
}

function remove() {
	while (( $# != 0 )); do
		sudo pacman -R $1-local-$(whoami)
		shift
	done
}

# Prints help
function help() {
	printf "${B}haourt ${C}${U}help${C} is accessed with ${U}--help${C} or ${U}-h${C} or no parameters\n"
	echo
	printf "${B}haourt${C} is a package that allows for wrapping of ${U}PKGBUILDs${C} into ${U}\`pacman\`${C} for ${U}\`\$HOME\`${C} installs"
	echo
	printf "Sync options\n"
	printf "  -S   => Install one or more package(s)\n"
	printf "  -Ss  => Search with fgrep\n"
	printf "  -Sy  => Update the mirrorlist\n"
	printf "  -Su  => Update the packages (based on the local mirrorlist)\n"
	printf "  -Syu => Update the mirrorlist and packages\n"
	printf "  -Sw  => Downloads, extracts and modifys the package so that you can just \`makepkg -sci\` it/them\n"
	printf "  -Sww => Downloads the package(s)\n"
	echo
	printf "Query options\n"
	printf "  -Q   => Will print the package and its version as it is locally"
	printf "  -Qs  => Will print the package and its version that matches a search query"
	echo
	printf "Remove packages using -R"
	echo
	printf "To submit a package, see $U'https://github.com/czipperz/haourt/blob/master/submit.md'$C\n"
}

if [ $# -eq 0 ]; then
	echo "Needs at least one argument"
	echo ""
	help
	exit 1
fi

case $1 in
	-S*)
		case $1 in
			-Sy) syncMirrorList
				;;
			-Syy) echo 'NOTICE: this option is the same as `-Sy` as of June 8th, 2015'
				syncMirrorList
				;;
			-Su) update
				;;
			-Syu) syncMirrorList
				update
				;;
			-Sw) shift
				downloadAll $@
				modifyAll $@
				exit 0
				;;
			-Sww) shift
				downloadAll $@
				exit 0
				;;
			-Ss) shift
				search $@
				exit 0
				;;
			-S) [ $# -gt 1 ] || {
					echo "Needs at least one package to install"
					exit 1
				}
				;;
			*) echo "Unfound or unimplemented option '$1'. It will still sync $@."
		esac
		shift
		syncAll $@
		;;
	-Q) shift
		query $@
		;;
	-Qs) shift
		querysearch $@
		;;
	-h|--help) help
		;;
	-R) shift
		remove $@
		;;
	*) echo "Unfound or unimplemented option '$1'. Sorry"
		echo ""
		help
		;;
esac
